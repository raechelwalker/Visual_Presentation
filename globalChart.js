var globalChart;
var globalMap;
var globalLineChart;
var densityChart;
var moderacyChart;
var credibilityChart;


function init() {
    makedensityplot();
    moderacyChart();
    credibilityChart();
}
document.addEventListener('DOMContentLoaded', init, false);

function makedensityplot() {


let dataSource = [-1.12,
    -0.99,
    -0.9,
    -0.81,
    -0.81,
    -0.79,
    -0.78,
    -0.78,
    -0.78,
    -0.78,
    -0.73,
    -0.73,
    -0.71,
    -0.71,
    -0.7,
    -0.69,
    -0.69,
    -0.68,
    -0.68,
    -0.68,
    -0.67,
    -0.67,
    -0.66,
    -0.64,
    -0.63,
    -0.63,
    -0.62,
    -0.62,
    -0.62,
    -0.61,
    -0.61,
    -0.61,
    -0.6,
    -0.6,
    -0.6,
    -0.6,
    -0.6,
    -0.58,
    -0.58,
    -0.57,
    -0.57,
    -0.57,
    -0.56,
    -0.56,
    -0.56,
    -0.55,
    -0.55,
    -0.55,
    -0.55,
    -0.55,
    -0.55,
    -0.55,
    -0.54,
    -0.54,
    -0.54,
    -0.53,
    -0.53,
    -0.53,
    -0.53,
    -0.52,
    -0.51,
    -0.51,
    -0.51,
    -0.51,
    -0.5,
    -0.49,
    -0.49,
    -0.49,
    -0.49,
    -0.49,
    -0.49,
    -0.49,
    -0.48,
    -0.48,
    -0.48,
    -0.48,
    -0.48,
    -0.48,
    -0.47,
    -0.47,
    -0.47,
    -0.47,
    -0.47,
    -0.47,
    -0.46,
    -0.46,
    -0.45,
    -0.44,
    -0.44,
    -0.44,
    -0.44,
    -0.44,
    -0.43,
    -0.43,
    -0.43,
    -0.43,
    -0.43,
    -0.43,
    -0.42,
    -0.42,
    -0.42,
    -0.41,
    -0.41,
    -0.4,
    -0.39,
    -0.39,
    -0.39,
    -0.39,
    -0.39,
    -0.38,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.36,
    -0.36,
    -0.36,
    -0.35,
    -0.35,
    -0.35,
    -0.35,
    -0.35,
    -0.35,
    -0.35,
    -0.35,
    -0.35,
    -0.35,
    -0.35,
    -0.34,
    -0.34,
    -0.33,
    -0.33,
    -0.33,
    -0.33,
    -0.32,
    -0.32,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.3,
    -0.29,
    -0.28,
    -0.27,
    -0.26,
    -0.25,
    -0.25,
    -0.25,
    -0.25,
    -0.24,
    -0.24,
    -0.24,
    -0.23,
    -0.23,
    -0.22,
    -0.22,
    -0.22,
    -0.22,
    -0.22,
    -0.22,
    -0.21,
    -0.2,
    -0.19,
    -0.19,
    -0.18,
    -0.18,
    -0.18,
    -0.18,
    -0.17,
    -0.17,
    -0.17,
    -0.16,
    -0.16,
    -0.16,
    -0.16,
    -0.16,
    -0.16,
    -0.16,
    -0.15,
    -0.14,
    -0.14,
    -0.14,
    -0.14,
    -0.14,
    -0.13,
    -0.13,
    -0.13,
    -0.13,
    -0.13,
    -0.13,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.1,
    -0.1,
    -0.1,
    -0.08,
    -0.08,
    -0.07,
    -0.06,
    -0.06,
    -0.05,
    -0.05,
    -0.05,
    -0.05,
    -0.04,
    -0.04,
    -0.02,
    -0.02,
    -0.02,
    -0.02,
    -0.02,
    -0.02,
    -0.01,
    0.0,
    0.0,
    -0.0,
    0.02,
    0.02,
    0.03,
    0.03,
    0.04,
    0.04,
    0.04,
    0.04,
    0.05,
    0.06,
    0.07,
    0.07,
    0.07,
    0.07,
    0.09,
    0.09,
    0.1,
    0.1,
    0.11,
    0.11,
    0.11,
    0.12,
    0.12,
    0.14,
    0.14,
    0.14,
    0.16,
    0.16,
    0.17,
    0.17,
    0.17,
    0.18,
    0.19,
    0.2,
    0.21,
    0.21,
    0.21,
    0.21,
    0.21,
    0.25,
    0.28,
    0.29,
    0.3,
    0.31,
    0.35,
    0.35,
    0.36,
    0.37,
    0.37,
    0.37,
    0.37,
    0.37,
    0.38,
    0.38,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.41,
    0.41,
    0.42,
    0.44,
    0.45,
    0.45,
    0.46,
    0.46,
    0.48,
    0.48,
    0.5,
    0.52,
    0.53,
    0.55,
    0.58,
    0.58,
    0.59,
    0.62,
    0.67,
    0.73,
    0.81,
    0.85,
    0.85,
    0.85,
    1.04,
    1.11,
    1.11,
    1.11,
    1.37,
    1.47,
    1.47,
    1.53,
    1.72,
    1.84,
    2.21,
    2.73];
let dataSource2 = [-1.16,
    -0.98,
    -0.96,
    -0.92,
    -0.9,
    -0.78,
    -0.78,
    -0.78,
    -0.77,
    -0.75,
    -0.7,
    -0.68,
    -0.68,
    -0.68,
    -0.67,
    -0.65,
    -0.65,
    -0.64,
    -0.64,
    -0.63,
    -0.62,
    -0.61,
    -0.61,
    -0.61,
    -0.6,
    -0.59,
    -0.59,
    -0.58,
    -0.58,
    -0.58,
    -0.58,
    -0.54,
    -0.54,
    -0.54,
    -0.54,
    -0.54,
    -0.54,
    -0.53,
    -0.52,
    -0.52,
    -0.52,
    -0.52,
    -0.51,
    -0.51,
    -0.51,
    -0.51,
    -0.51,
    -0.51,
    -0.51,
    -0.51,
    -0.51,
    -0.5,
    -0.49,
    -0.49,
    -0.48,
    -0.48,
    -0.47,
    -0.47,
    -0.47,
    -0.46,
    -0.46,
    -0.46,
    -0.46,
    -0.46,
    -0.45,
    -0.45,
    -0.45,
    -0.45,
    -0.44,
    -0.43,
    -0.43,
    -0.43,
    -0.43,
    -0.43,
    -0.41,
    -0.4,
    -0.4,
    -0.4,
    -0.38,
    -0.38,
    -0.38,
    -0.38,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.37,
    -0.36,
    -0.36,
    -0.36,
    -0.36,
    -0.35,
    -0.35,
    -0.35,
    -0.35,
    -0.34,
    -0.34,
    -0.33,
    -0.32,
    -0.32,
    -0.32,
    -0.32,
    -0.32,
    -0.32,
    -0.32,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.31,
    -0.3,
    -0.3,
    -0.29,
    -0.29,
    -0.29,
    -0.27,
    -0.26,
    -0.25,
    -0.25,
    -0.25,
    -0.23,
    -0.23,
    -0.23,
    -0.22,
    -0.22,
    -0.22,
    -0.22,
    -0.22,
    -0.22,
    -0.21,
    -0.2,
    -0.2,
    -0.2,
    -0.19,
    -0.19,
    -0.19,
    -0.19,
    -0.19,
    -0.19,
    -0.17,
    -0.17,
    -0.17,
    -0.16,
    -0.16,
    -0.16,
    -0.16,
    -0.16,
    -0.16,
    -0.16,
    -0.15,
    -0.15,
    -0.14,
    -0.14,
    -0.13,
    -0.13,
    -0.13,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.12,
    -0.11,
    -0.11,
    -0.11,
    -0.11,
    -0.1,
    -0.09,
    -0.09,
    -0.07,
    -0.07,
    -0.07,
    -0.07,
    -0.07,
    -0.06,
    -0.06,
    -0.06,
    -0.04,
    -0.04,
    -0.02,
    -0.02,
    -0.02,
    -0.02,
    -0.02,
    -0.02,
    -0.02,
    -0.02,
    -0.0,
    0.0,
    0.0,
    -0.0,
    0.02,
    0.02,
    0.03,
    0.03,
    0.03,
    0.03,
    0.04,
    0.04,
    0.04,
    0.04,
    0.05,
    0.05,
    0.05,
    0.06,
    0.06,
    0.06,
    0.06,
    0.07,
    0.07,
    0.07,
    0.07,
    0.07,
    0.08,
    0.08,
    0.09,
    0.1,
    0.1,
    0.1,
    0.11,
    0.11,
    0.11,
    0.11,
    0.11,
    0.13,
    0.13,
    0.13,
    0.13,
    0.14,
    0.14,
    0.14,
    0.14,
    0.15,
    0.17,
    0.17,
    0.18,
    0.19,
    0.2,
    0.2,
    0.2,
    0.21,
    0.21,
    0.22,
    0.22,
    0.23,
    0.25,
    0.27,
    0.27,
    0.3,
    0.34,
    0.35,
    0.35,
    0.35,
    0.37,
    0.37,
    0.37,
    0.37,
    0.37,
    0.37,
    0.37,
    0.37,
    0.37,
    0.38,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.39,
    0.4,
    0.41,
    0.43,
    0.43,
    0.44,
    0.45,
    0.46,
    0.48,
    0.55,
    0.68,
    0.7,
    0.71,
    0.73,
    0.77,
    0.8,
    0.85,
    0.88,
    0.95,
    1.11,
    1.11,
    1.11,
    1.11,
    1.11,
    1.11,
    1.29,
    1.38,
    1.61,
    1.61,
    1.66,
    1.84,
    1.91,
    1.91,
    2.2,
    2.28];

    (async () => {

          maleColorJitter = "#5DADE2",
          femaleColorJitter = "#F1948A";
        //Process density data
        let step = 1,
          precision = 0.00000000001,
          width = 2.5;
        
        let dataWeight = processDensity(
          step,
          precision,
          width,
          dataSource,
          dataSource2
        );
       
        //structure both male and female arrays to fit an area chart type
        dataWeight.results[0] = dataWeight.results[0].map((e) => [e[0], e[2]]);
        dataWeight.results[1] = dataWeight.results[1].map((e) => {
          e[2] != null ? (e[2] = e[2] - 1) : e[2];
          return [e[0], e[2]];
        });
        //reverse the weight and value for the jitter chart
      
        Highcharts.chart("politicalChart", {
          chart: {
            zoomType: "xy"
          },
          title: {
            text: "Political Polarization Distribution"
          },
          xAxis: {
            reversed: false,
            title: {
              text: "Score"
            },
            labels: {
              enabled: true
            },
            startOnTick: false,
            endOnTick: false,
            labels: {
              format: "{value}",
              style: {
                fontSize: "8px"
              }
            }
          },
          yAxis: [
            {
              height: "50%",
              id: "female",
              min: 0,
              max: 1,
              tickInterval: 0.2,
              visible: true
            },
            {
              top: "50%",
              height: "50%",
              id: "male",
              min: 0,
              max: 1,
              tickInterval: 0.2,
              visible: true
            }
          ],
          plotOptions: {
            scatter: {
              marker: {
                radius: 3,
                symbol: "circle",
                states: {
                  hover: {
                    enabled: true,
                    lineColor: "rgb(100,100,100)"
                  }
                }
            },
              states: {
                hover: {
                  marker: {
                    enabled: false
                  }
                }
              }
            }
          },
          tooltip: {
            split: true,
            crosshairs: true,
            headerFormat: "",
            valueDecimals: 4,
            pointFormat: "<b>{series.name}</b>: {point.x:.3f}, {point.y:.3f}}<br/>"
          },
          series: [
            {
              name: "Unflagged",
              type: "areaspline",
              data: dataWeight.results[1],
              color: femaleColorJitter,
              yAxis: 0
            },
            {
              name: "Flagged",
              type: "areaspline",
              data: dataWeight.results[0],
              color: maleColorJitter,
              yAxis: 1
            }
            
          ]
        });
      })();

}










function moderacyChart() {
    //let dataSource = [93, 93, 96, 100, 101, 102, 102,106];
    //let dataSource2 = [90, 90, 90, 100, 101, 102, 102,100];
    
    let dataSource = [1.14,
        1.17,
        1.19,
        1.22,
        1.26,
        1.27,
        1.28,
        1.28,
        1.32,
        1.33,
        1.39,
        1.44,
        1.45,
        1.47,
        1.47,
        1.52,
        1.54,
        1.58,
        1.59,
        1.6,
        1.6,
        1.61,
        1.61,
        1.61,
        1.62,
        1.62,
        1.63,
        1.63,
        1.64,
        1.64,
        1.65,
        1.67,
        1.67,
        1.67,
        1.67,
        1.67,
        1.67,
        1.68,
        1.68,
        1.68,
        1.68,
        1.69,
        1.69,
        1.69,
        1.69,
        1.69,
        1.7,
        1.7,
        1.7,
        1.7,
        1.71,
        1.71,
        1.71,
        1.71,
        1.71,
        1.72,
        1.72,
        1.72,
        1.73,
        1.73,
        1.73,
        1.74,
        1.74,
        1.74,
        1.74,
        1.75,
        1.75,
        1.75,
        1.75,
        1.75,
        1.76,
        1.76,
        1.77,
        1.77,
        1.78,
        1.78,
        1.78,
        1.79,
        1.79,
        1.79,
        1.8,
        1.8,
        1.8,
        1.8,
        1.8,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.82,
        1.82,
        1.82,
        1.82,
        1.83,
        1.83,
        1.83,
        1.83,
        1.83,
        1.83,
        1.83,
        1.83,
        1.83,
        1.83,
        1.84,
        1.84,
        1.84,
        1.85,
        1.85,
        1.85,
        1.85,
        1.85,
        1.85,
        1.86,
        1.86,
        1.86,
        1.86,
        1.86,
        1.86,
        1.86,
        1.86,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.95,
        1.95,
        1.95,
        1.95,
        1.95,
        1.95,
        1.95,
        1.95,
        1.95,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.98,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        2.01,
        2.02,
        2.03,
        2.07,
        2.09,
        2.1,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.12,
        2.14,
        2.22,
        2.24,
        2.24,
        2.24,
        2.26,
        2.32,
        2.44,
        2.48,
        2.52,
        2.63,
        2.82];
    let dataSource2 = [1.17,
        1.2,
        1.28,
        1.28,
        1.28,
        1.28,
        1.31,
        1.34,
        1.4,
        1.44,
        1.47,
        1.48,
        1.5,
        1.5,
        1.53,
        1.53,
        1.54,
        1.54,
        1.54,
        1.54,
        1.54,
        1.55,
        1.56,
        1.56,
        1.56,
        1.58,
        1.58,
        1.6,
        1.62,
        1.62,
        1.64,
        1.64,
        1.64,
        1.64,
        1.65,
        1.65,
        1.66,
        1.66,
        1.66,
        1.66,
        1.67,
        1.67,
        1.68,
        1.68,
        1.69,
        1.69,
        1.69,
        1.69,
        1.69,
        1.69,
        1.7,
        1.7,
        1.73,
        1.73,
        1.73,
        1.74,
        1.74,
        1.75,
        1.75,
        1.75,
        1.75,
        1.76,
        1.78,
        1.78,
        1.78,
        1.79,
        1.8,
        1.8,
        1.8,
        1.8,
        1.8,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.81,
        1.82,
        1.82,
        1.82,
        1.83,
        1.83,
        1.83,
        1.83,
        1.83,
        1.83,
        1.83,
        1.84,
        1.85,
        1.85,
        1.85,
        1.85,
        1.85,
        1.85,
        1.85,
        1.85,
        1.86,
        1.86,
        1.86,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.87,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.88,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.89,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.9,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.91,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.92,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.93,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.94,
        1.95,
        1.95,
        1.95,
        1.95,
        1.95,
        1.95,
        1.95,
        1.95,
        1.95,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.96,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.97,
        1.98,
        1.98,
        1.98,
        1.98,
        1.98,
        1.98,
        1.98,
        1.98,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        1.99,
        2.0,
        2.0,
        2.04,
        2.08,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.11,
        2.12,
        2.12,
        2.14,
        2.2,
        2.21,
        2.23,
        2.24,
        2.24,
        2.24,
        2.24,
        2.24,
        2.24,
        2.36,
        2.48,
        2.51,
        2.51,
        2.57,
        2.57,
        2.62,
        2.62];
    
        (async () => {
    
              maleColorJitter = "#5DADE2",
              femaleColorJitter = "#F1948A";
            //Process density data
            let step = 1,
              precision = 0.00000000001,
              width = 2;
            
            let dataWeight = processDensity(
              step,
              precision,
              width,
              dataSource,
              dataSource2
            );
           
            //structure both male and female arrays to fit an area chart type
            dataWeight.results[0] = dataWeight.results[0].map((e) => [e[0], e[2]]);
            dataWeight.results[1] = dataWeight.results[1].map((e) => {
              e[2] != null ? (e[2] = e[2] - 1) : e[2];
              return [e[0], e[2]];
            });
            //reverse the weight and value for the jitter chart
          
            Highcharts.chart("moderacyChart", {
              chart: {
                zoomType: "xy"
              },
              title: {
                text: "Moderacy Polarization Distribution"
              },
              xAxis: {
                reversed: false,
                title: {
                  text: "Score"
                },
                labels: {
                  enabled: true
                },
                startOnTick: false,
                endOnTick: false,
                labels: {
                  format: "{value}",
                  style: {
                    fontSize: "8px"
                  }
                }
              },
              yAxis: [
                {
                  height: "50%",
                  id: "female",
                  min: 0,
                  max: 1,
                  tickInterval: 0.2,
                  visible: true
                },
                {
                  top: "50%",
                  height: "50%",
                  id: "male",
                  min: 0,
                  max: 1,
                  tickInterval: 0.2,
                  visible: true
                }
              ],
              plotOptions: {
                scatter: {
                  marker: {
                    radius: 3,
                    symbol: "circle",
                    states: {
                      hover: {
                        enabled: true,
                        lineColor: "rgb(100,100,100)"
                      }
                    }
                  },
                  states: {
                    hover: {
                      marker: {
                        enabled: false
                      }
                    }
                  }
                }
              },
              tooltip: {
                split: true,
                crosshairs: true,
                headerFormat: "",
                valueDecimals: 4,
                pointFormat: "<b>{series.name}</b>: {point.x:.3f}, {point.y:.3f}}<br/>"
              },
              series: [
                {
                  name: "Unflagged",
                  type: "areaspline",
                  data: dataWeight.results[1],
                  color: femaleColorJitter,
                  yAxis: 0
                },
                {
                  name: "Flagged",
                  type: "areaspline",
                  data: dataWeight.results[0],
                  color: maleColorJitter,
                  yAxis: 1
                }
                
              ]
            });
          })();
   
    }

    function credibilityChart() {
      let dataSource = [1.99,
        1.99,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.05,
        2.05,
        2.05,
        2.05,
        2.05,
        2.05,
        2.05,
        2.06,
        2.06,
        2.06,
        2.06,
        2.06,
        2.06,
        2.07,
        2.07,
        2.07,
        2.08,
        2.08,
        2.08,
        2.08,
        2.09,
        2.09,
        2.11,
        2.15];
      let dataSource2 = [1.99,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.01,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.02,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.03,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.04,
        2.05,
        2.05,
        2.05,
        2.05,
        2.06,
        2.06,
        2.06,
        2.07,
        2.08,
        2.08,
        2.08,
        2.08,
        2.09,
        2.09,
        2.09,
        2.1,
        2.12,
        2.13];
      
          (async () => {
      
                maleColorJitter = "#5DADE2",
                femaleColorJitter = "#F1948A";
              //Process density data
              let step = 1,
                precision = 0.00000000001,
                width = 2;
              
              let dataWeight = processDensity(
                step,
                precision,
                width,
                dataSource,
                dataSource2
              );
             
              //structure both male and female arrays to fit an area chart type
              dataWeight.results[0] = dataWeight.results[0].map((e) => [e[0], e[2]]);
              dataWeight.results[1] = dataWeight.results[1].map((e) => {
                e[2] != null ? (e[2] = e[2] - 1) : e[2];
                return [e[0], e[2]];
              });
              //reverse the weight and value for the jitter chart
            
              Highcharts.chart("credibilityChart", {
                chart: {
                  zoomType: "xy"
                },
                title: {
                  text: "Credibility Polarization Distribution"
                },
                xAxis: {
                  reversed: false,
                  title: {
                    text: "Score"
                  },
                  labels: {
                    enabled: true
                  },
                  startOnTick: false,
                  endOnTick: false,
                  labels: {
                    format: "{value}",
                    style: {
                      fontSize: "8px"
                    }
                  }
                },
                yAxis: [
                  {
                    height: "50%",
                    id: "female",
                    min: 0,
                    max: 1,
                    tickInterval: 0.2,
                    visible: true
                  },
                  {
                    top: "50%",
                    height: "50%",
                    id: "male",
                    min: 0,
                    max: 1,
                    tickInterval: 0.2,
                    visible: true
                  }
                ],
                plotOptions: {
                  scatter: {
                    marker: {
                      radius: 3,
                      symbol: "circle",
                      states: {
                        hover: {
                          enabled: true,
                          lineColor: "rgb(100,100,100)"
                        }
                      }
                    },
                    states: {
                      hover: {
                        marker: {
                          enabled: false
                        }
                      }
                    }
                  }
                },
                tooltip: {
                  split: true,
                  crosshairs: true,
                  headerFormat: "",
                  valueDecimals: 4,
                  pointFormat: "<b>{series.name}</b>: {point.x:.3f}, {point.y:.3f}}<br/>"
                },
                series: [
                  {
                    name: "Unflagged",
                    type: "areaspline",
                    data: dataWeight.results[1],
                    color: femaleColorJitter,
                    yAxis: 0
                  },
                  {
                    name: "Flagged",
                    type: "areaspline",
                    data: dataWeight.results[0],
                    color: maleColorJitter,
                    yAxis: 1
                  }
                  
                ]
              });
            })();
     
      }